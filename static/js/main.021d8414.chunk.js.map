{"version":3,"sources":["components/NavBar/index.js","components/TeamCard/index.js","components/Wrapper/index.js","components/jumbotron/index.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","score","topScore","TeamCard","alt","name","src","image","onClick","imageClick","id","Wrapper","children","Jumbotron","class","alertMsg","App","state","teams","clickedTeam","filter","team","clicked","console","log","i","length","setState","sort","a","b","Math","random","this","map","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"47CAmBeA,MAhBf,SAAgBC,GACd,OACE,qBAAKC,UAAY,SAAjB,SACE,qBAAKA,UAAU,SAAf,SACE,+BACE,kDACA,2DACA,yCACUD,EAAME,MADhB,eACmCF,EAAMG,oB,MCKpCC,MAbf,SAAkBJ,GAChB,OAEE,qBAAKC,UAAU,gBAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAC/BC,QAAS,kBAAMT,EAAMU,WAAWV,EAAMW,Y,aCFjCC,MAJf,SAAiBZ,GACf,OAAO,qBAAKC,UAAU,UAAf,SAA0BD,EAAMa,Y,MCe1BC,MAhBf,SAAmBd,GACjB,OACE,sBAAKC,UAAU,YAAf,UACE,uBACA,uBACA,oBAAIc,MAAM,YAAV,8BACA,oBAAIA,MAAM,OAAV,oGAKA,6BAAKf,EAAMgB,eCLbd,EAAQ,EACRC,EAAW,EACXa,EAAW,GAuEAC,E,4MApEbC,MAAQ,CACNf,SAAU,EACVD,MAAO,EACPiB,MAAOA,EACPH,Y,EAGFN,WAAa,SAACC,GACZ,IAAMQ,EAAQ,EAAKD,MAAMC,MAEnBC,EAAcD,EAAME,QAAO,SAACC,GAAD,OAAUA,EAAKX,KAAOA,KAGvD,GAAIS,EAAY,GAAGG,QAAS,CAC1BrB,EAAQ,EACRsB,QAAQC,IAAIvB,GACZc,EAAW,uBAIX,IAAK,IAAIU,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IAChCP,EAAMO,GAAGH,SAAU,EAErB,EAAKK,SAAS,CAAE1B,UAChB,EAAK0B,SAAS,CAAET,UAChB,EAAKS,SAAS,CAACZ,kBAGNd,GAAS,KAClBkB,EAAY,GAAGG,SAAU,EACzBrB,IACAsB,QAAQC,IAAIvB,GACZc,EAAW,oBAGTd,EAAQC,IACVA,EAAWD,EACX,EAAK0B,SAAS,CAAEzB,cAIlBgB,EAAMU,MAAK,SAAUC,EAAGC,GACtB,MAAO,GAAMC,KAAKC,YAEpB,EAAKL,SAAS,CAACT,UACf,EAAKS,SAAS,CAAC1B,UACf,EAAK0B,SAAS,CAACZ,c,4CAGjB,WAAU,IAAD,OACP,OACE,gCACE,cAAC,EAAD,CAAQd,MAAOgC,KAAKhB,MAAMhB,MAAOC,SAAU+B,KAAKhB,MAAMf,WACtD,cAAC,EAAD,CAAWa,SAAYkB,KAAKhB,MAAMF,WAClC,cAAC,EAAD,UACGkB,KAAKhB,MAAMC,MAAMgB,KAAI,SAAChB,GAAD,OACpB,cAAC,EAAD,CACET,WAAY,EAAKA,WACjBC,GAAIQ,EAAMR,GAEVH,MAAOW,EAAMX,OADRW,EAAMR,gB,GA5DPyB,aCDHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.021d8414.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar(props) {\r\n  return (\r\n    <div className = \"parent\">\r\n      <nav className=\"navbar\">\r\n        <ul >\r\n          <li> Nba Clicky Game</li>\r\n          <li> Click an image to begin!</li>\r\n          <li>\r\n            Score: {props.score}| TopScore: {props.topScore}\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction TeamCard(props) {\r\n  return (\r\n      \r\n    <div className=\"card col-md-3\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} \r\n          onClick={() => props.imageClick(props.id)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TeamCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron(props) {\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      <br></br>\r\n      <br></br>\r\n      <h1 class=\"display-3\">NBA Clicky game!</h1>\r\n      <h2 class=\"lead\">\r\n        Test your memory and see how many cards you can click without clicking\r\n        the same twice!\r\n      </h2>\r\n\r\n      <h3>{props.alertMsg}</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import \"./App.css\";\nimport NavBar from \"./components/NavBar\";\nimport TeamCard from \"./components/TeamCard\";\nimport React, { Component } from \"react\";\nimport teams from \"./teams.json\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/jumbotron\"\n\n// Initial Scores\nlet score = 0;\nlet topScore = 0;\nlet alertMsg = \"\"\n\nclass App extends Component {\n  state = {\n    topScore: 0,\n    score: 0,\n    teams: teams,\n    alertMsg\n  };\n\n  imageClick = (id) => {\n    const teams = this.state.teams;\n    // Creates an array with the teams that have been clicked.\n    const clickedTeam = teams.filter((team) => team.id === id);\n\n    // If a team is clicked again, reset score to 0\n    if (clickedTeam[0].clicked) {\n      score = 0;\n      console.log(score);\n      alertMsg = \"You lose! Try again.\"\n      \n\n      // teamCard is initially set to false\n      for (let i = 0; i < teams.length; i++) {\n        teams[i].clicked = false;\n      }\n      this.setState({ score });\n      this.setState({ teams });\n      this.setState({alertMsg})\n\n      // increment score by 1 everytime a new card is clicked\n    } else if (score <= 12) {\n      clickedTeam[0].clicked = true;\n      score++;\n      console.log(score);\n      alertMsg = \"You are correct!\"\n    }\n    // conditional statement to set each new top score\n    if (score > topScore) {\n      topScore = score;\n      this.setState({ topScore });\n    \n    }\n    // Randomize team cards every time one is clicked\n    teams.sort(function (a, b) {\n      return 0.5 - Math.random();\n    });\n    this.setState({teams});\n    this.setState({score})\n    this.setState({alertMsg})\n  };\n\n  render() {\n    return (\n      <div>\n        <NavBar score={this.state.score} topScore={this.state.topScore} />\n        <Jumbotron alertMsg = {this.state.alertMsg}/>\n        <Wrapper>\n          {this.state.teams.map((teams) => (\n            <TeamCard\n              imageClick={this.imageClick}\n              id={teams.id}\n              key={teams.id}\n              image={teams.image}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}